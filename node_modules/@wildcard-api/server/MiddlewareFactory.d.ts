import { Context, HttpRequestProps, HttpResponseProps, UniversalAdapterName } from "./WildcardServer";
export { MiddlewareFactory };
declare type SetContext<HttpRequest> = (req: HttpRequest) => Promise<Context> | Context;
declare type ServerAdapterOptions = any & {
    _brand: "ServerAdapterOptions";
};
declare type RequestHandlerArg1 = {
    requestProps: HttpRequestProps;
};
declare type RequestHandlerReturn = Promise<HttpResponseProps | null>;
declare type RequestHandler<HttpRequest> = (req: HttpRequest, arg1: RequestHandlerArg1) => RequestHandlerReturn;
declare type ServerAdapter<ServerMiddleware, HttpRequest> = (arg0: RequestHandler<HttpRequest>[], arg1: ServerAdapterOptions) => ServerMiddleware;
declare function MiddlewareFactory<ServerMiddleware, HttpRequest>(serverAdapter: ServerAdapter<ServerMiddleware, HttpRequest>, __INTERNAL_universalAdapter: UniversalAdapterName, adapterOptions?: ServerAdapterOptions): (setContext?: SetContext<HttpRequest>) => ServerMiddleware;
//# sourceMappingURL=MiddlewareFactory.d.ts.map