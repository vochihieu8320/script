export { WildcardServer };
declare type EndpointName = string;
declare type EndpointArgs = any[];
declare type EndpointFunction = (...args: EndpointArgs) => EndpointResult;
declare type Endpoints = Record<EndpointName, EndpointFunction>;
declare type EndpointResult = any;
declare type ContextObject = Record<string, any>;
export declare type Context = ContextObject | undefined;
declare type ContextGetter = () => Promise<Context> | Context;
/** Wildcard Server Configuration */
declare type Config = {
    /** Serve Wildcard API HTTP requests at `/${baseUrl}/*`. Default: `_wildcard_api`. */
    baseUrl: string;
    /** Whether Wildcard generates HTTP ETag headers. */
    disableCache: boolean;
};
declare type HttpRequestUrl = string & {
    _brand?: "HttpRequestUrl";
};
declare const HttpRequestMethod: string[];
declare type HttpRequestMethod = "POST" | "GET" | "post" | "get";
declare type HttpRequestBody = string & {
    _brand?: "HttpRequestBody";
};
export declare type UniversalAdapterName = "express" | "koa" | "hapi" | undefined;
export declare type HttpRequestProps = {
    url: HttpRequestUrl;
    method: HttpRequestMethod;
    body?: HttpRequestBody;
};
declare type HttpResponseBody = string & {
    _brand?: "HttpResponseBody";
};
declare type HttpResponseContentType = string & {
    _brand?: "HttpResponseContentType";
};
declare type HttpResponseStatusCode = number & {
    _brand?: "HttpResponseStatusCode";
};
declare type HttpResponseEtag = string & {
    _brand?: "HttpResponseEtag";
};
export declare type HttpResponseProps = {
    body: HttpResponseBody;
    contentType: HttpResponseContentType;
    statusCode: HttpResponseStatusCode;
    etag?: HttpResponseEtag;
};
declare type MinusContext<EndpointFunction, Context> = EndpointFunction extends (this: Context, ...rest: infer EndpointArguments) => infer EndpointReturnType ? (...rest: EndpointArguments) => EndpointReturnType : never;
export declare type FrontendType<Endpoints, Context> = {
    [EndpointName in keyof Endpoints]: MinusContext<Endpoints[EndpointName], Context>;
};
declare class WildcardServer {
    endpoints: Endpoints;
    config: Config;
    /**
     * Get the HTTP response of API HTTP requests. Use this if you cannot use the express/koa/hapi middleware.
     * @param requestProps.url HTTP request URL
     * @param requestProps.method HTTP request method
     * @param requestProps.body HTTP request body
     * @param context The context object - the endpoint functions' `this`.
     * @returns HTTP response
     */
    getApiHttpResponse(requestProps: HttpRequestProps, context?: Context | ContextGetter, 
    /** @ignore */
    { __INTERNAL_universalAdapter, }?: {
        __INTERNAL_universalAdapter?: UniversalAdapterName;
    }): Promise<HttpResponseProps | null>;
    /** @private */
    __directCall(endpointName: EndpointName, endpointArgs: EndpointArgs, context: Context): Promise<any>;
}
//# sourceMappingURL=WildcardServer.d.ts.map